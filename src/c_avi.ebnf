<Program> ::= <ExternalDeclaration> { <ExternalDeclaration> }

<ExternalDeclaration> ::= <Type> <Identifier> <Declarations>

<Declarations> ::= <FunctionDefinition> | <VariableDeclarationGlobal> ;

<VariableDeclarationGlobal> ::= [ = <Expression> ] { , <Identifier> [ = <Expression> ] }

<FunctionDefinition> ::= ( <ParameterListOpt> ) <CompoundStatement>

<ParameterListOpt> ::= <ParameterList> | epsilon

<ParameterList> ::= <ParameterDeclaration> { , <ParameterDeclaration> }

<ParameterDeclaration> ::= <Type> <Identifier>

<CompoundStatement> ::= `{` <StatementList> `}`

<StatementList> ::= { <Statement> }

<Statement> ::= <AssignmentStatement> ;
              | <CompoundStatement>
              | <DeclareStatement> ;
              | <IfStatement>
              | <WhileStatement>
              | epsilon

<AssignmentStatement> ::= <Identifier> = <Expression>

<InitDeclarator> ::= <Identifier> [ = <Expression> ]

<DeclareStatement> ::= <Type> <InitDeclarator> { , <InitDeclarator> }

<IfStatement> ::= if ( <Expression> ) <CompoundStatement> [ else <CompoundStatement> ]

<WhileStatement> ::= while ( <Expression> ) <CompoundStatement>

<Expression> ::= <ArithmeticExpression> <RelationalPrime>

<RelationalPrime> ::= < <ArithmeticExpression> <RelationalPrime>
                    | <= <ArithmeticExpression> <RelationalPrime>
                    | > <ArithmeticExpression> <RelationalPrime>
                    | >= <ArithmeticExpression> <RelationalPrime>
                    | == <ArithmeticExpression> <RelationalPrime>
                    | != <ArithmeticExpression> <RelationalPrime>
                    | epsilon

<ArithmeticExpression> := <Term> <ArithmeticPrime>

<ArithmeticPrime> ::= + <Term> <ArithmeticPrime>
                    | - <Term> <ArithmeticPrime>
                    | epsilon

<Term> ::= <Factor> <TermPrime>

<TermPrime> ::= * <Factor> <TermPrime>
              | / <Factor> <TermPrime>
              | epsilon

<Factor> ::= <Identifier> | <Number> | ( <Expression> )

<Identifier> ::= <Alpha> { <Alpha> | <Digit> }

<Number> ::= <Digit> { <Digit> }                    

<Type> ::= int | char | void

<Alpha> ::= A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z

<Digit> ::= 0|1|2|3|4|5|6|7|8|9

